{"version":3,"sources":["logic/gameBoard.ts","logic/ship.ts","components/BoardCell.tsx","components/SunkShipIndicators.tsx","components/GameBoardDisplay.tsx","components/GameEndMessage.tsx","components/GithubFooter.tsx","components/DraggableShip.tsx","components/GameRules.tsx","components/ShipPlacementMenu.tsx","components/StatusText.tsx","logic/player.ts","App.tsx","index.jsx"],"names":["CellState","GameBoard","cells","nextShipPlacement","isNextShipPlacementValid","haveAllShipsSunk","ships","sunkShipsInfo","_arePositionsLocked","makeAutoObservable","this","initializeBoard","Array","from","length","map","row","column","empty","shipPlacement","Error","ship","direction","isShipWithinBoardEdges","size","wouldShipsBeInContact","newCellPositions","predictCellsInShip","shipToPlace","cellPositions","setStateOfCells","shipIntact","push","quantity","sunk","states","positions","cellState","includes","position","attackedShip","findShipAt","shipHit","missed","attackedCell","find","shipCellPos","attackedIndex","indexOf","hit","isSunk","handleSunkShip","every","hits","forEach","sunkPos","shipSunk","knownCellPositions","getAdjacentCellPositions","getCornerCellPositions","filter","pos","undefined","knownEmpty","shipToRemove","shipToRotate","cellsBeforeRotation","newDirection","newShipPlacement","originPosition","prepareToPlaceShip","placeShip","some","cellPos","proposedPlacement","proposedCells","cell","getSurroundingCellStates","state","surroundingStates","checkedRow","checkedColumn","isValidColumn","cellsInRow","targetCell","surrounding","existsRowBefore","existsRowAfter","existsColumnBefore","existsColumnAfter","i","newState","Ship","initSize","_cellPositions","_originPosition","initializeHits","x","index","newPositions","reduce","origin","Math","min","observer","owner","cellRef","useRef","board","getCellPositionFromIndex","floor","handleShipDrag","event","detail","dragStop","setIsDropPositionValid","placement","useEffect","cellRefInit","current","addEventListener","removeEventListener","ref","className","style","type","arePositionsLocked","opponent","setCellStyle","onClick","attack","removeShipAt","key","shipSize","parseInt","info","_","isGameOver","isPlayerTurn","setStyle","flat","loser","players","player","id","window","location","reload","GithubFooter","icon","faHeart","color","href","DraggableShip","display","nodeRef","useState","isDragging","setIsDragging","isDropPositionValid","findCellAtPoint","y","document","elementsFromPoint","el","classList","contains","createDragEvent","CustomEvent","setZIndex","value","zIndex","toString","defaultPosition","scale","onStart","onDrag","e","dispatchEvent","handleDragMove","onStop","handleDragStop","flexDirection","calculateBorderStyles","faArrowsAlt","cellIndex","borderRight","borderBottom","GameRules","user","setDirection","clear","faSyncAlt","placeRandomShips","faDice","padding","faArrowsAltH","faArrowsAltV","marginTop","lockShipsInPlace","faPlay","groupIndex","shipIndex","numberOfShipsWithSize","status","hasExtraTurn","getStatus","Player","autoAttackDelay","clearFirst","shipsToPlace","repeat","random","unconstrainedPosition","constrainedPosition","receiveAttack","autoAttack","setTimeout","makeSmartMove","opponentBoard","hitPositions","findCellsWithState","extendedPositions","shuffle","hitPos","getAdjacentCellStates","adjacentIndex","unhitPos","adjacentPositions","getCornerCellStates","attackRandomCell","freeCellPositions","randomCellIndex","human","cpu","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fee4ec23.chunk.js","sourcesContent":["import Ship from './ship';\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\ntype CellField = CellState[][];\r\n\r\nenum CellState {\r\n  empty,\r\n  missed,\r\n  shipIntact,\r\n  shipHit,\r\n  shipSunk,\r\n  knownEmpty\r\n}\r\n\r\nexport type ShipPlacement = {\r\n  ship: Ship, \r\n  direction: 'horizontal' | 'vertical', \r\n  row: number, \r\n  column: number\r\n} | null\r\n\r\nexport type SunkShipsInfo = {\r\n  [key: number]: { quantity: number, sunk: number }\r\n}\r\n\r\nclass GameBoard {\r\n  public cells: CellField;\r\n  public nextShipPlacement: ShipPlacement = null;\r\n  public isNextShipPlacementValid = false;\r\n  public haveAllShipsSunk = false;\r\n  public ships: Ship[] = [];\r\n  public sunkShipsInfo: SunkShipsInfo = {}\r\n  private _arePositionsLocked = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.cells = this.initializeBoard();\r\n  }\r\n\r\n  private initializeBoard() {\r\n    return (\r\n      Array.from({ length: 10 }).map(row => {\r\n        return Array.from({ length: 10 }).map(column => CellState.empty)\r\n      })\r\n    )\r\n  }\r\n\r\n  public clear() {\r\n    this.ships = [];\r\n    this.nextShipPlacement = null;\r\n    this.haveAllShipsSunk = false;\r\n    this.sunkShipsInfo = {};\r\n    this.cells = this.initializeBoard();\r\n  }\r\n\r\n  public prepareToPlaceShip(shipPlacement: ShipPlacement) {\r\n    if (!shipPlacement) throw new Error(\"No ship placement provided.\");\r\n\r\n    const { ship, direction, row, column } = shipPlacement;\r\n    const startPoint = direction === 'horizontal' ? column : row;\r\n    const isShipWithinBoardEdges = row >= 0 && column >= 0 && startPoint + ship.size <= 10;\r\n    this.isNextShipPlacementValid = isShipWithinBoardEdges && !this.wouldShipsBeInContact(shipPlacement);\r\n    this.nextShipPlacement = shipPlacement;\r\n  }\r\n\r\n  public placeShip() {\r\n    if (!this.nextShipPlacement) {\r\n      throw new Error(\"Can't place ship as there isn't one ready to place.\");\r\n    }\r\n    if (!this.isNextShipPlacementValid) {\r\n      return;\r\n    }\r\n\r\n    const size = this.nextShipPlacement.ship.size;\r\n    const newCellPositions = this.predictCellsInShip(this.nextShipPlacement);\r\n    const shipToPlace = this.nextShipPlacement.ship;\r\n    shipToPlace.cellPositions = newCellPositions;\r\n    shipToPlace.direction = this.nextShipPlacement.direction;\r\n\r\n    this.setStateOfCells(newCellPositions, CellState.shipIntact);\r\n    \r\n    this.ships.push(shipToPlace);\r\n    this.isNextShipPlacementValid = false;\r\n    this.nextShipPlacement = null;\r\n\r\n    this.sunkShipsInfo[size] = {\r\n      quantity: this.sunkShipsInfo[size] ? this.sunkShipsInfo[size].quantity + 1 : 1,\r\n      sunk: 0\r\n    };\r\n  }\r\n\r\n  public lockShipsInPlace() {\r\n    this._arePositionsLocked = true;\r\n  }\r\n\r\n  public findCellsWithState(states: CellState[]) {\r\n    const positions: [number, number][] = [];\r\n    for (let row = 0; row < 10; row++) {\r\n      for (let column = 0; column < 10; column++) {\r\n        const cellState = this.cells[row][column];\r\n        if (states.includes(cellState)) {\r\n          positions.push([row, column]);\r\n        }\r\n      }\r\n    }\r\n    return positions;\r\n  }\r\n\r\n  public receiveAttack(position: [number, number]) {\r\n    const attackedShip = this.findShipAt(position);\r\n    this.setStateOfCells([position], attackedShip ? CellState.shipHit : CellState.missed);\r\n\r\n    if (attackedShip) {\r\n      const attackedCell = attackedShip.cellPositions.find(shipCellPos => (\r\n        shipCellPos[0] === position[0] && shipCellPos[1] === position[1]\r\n      ));\r\n\r\n      if (!attackedCell) {\r\n        throw new Error('Hmm... a ship was attacked but its attacked cell cannot be found.');\r\n      } \r\n\r\n      const attackedIndex = attackedShip.cellPositions.indexOf(attackedCell);\r\n      attackedShip.hit(attackedIndex);\r\n      if (attackedShip.isSunk) {\r\n        this.handleSunkShip(attackedShip);\r\n      }\r\n      this.haveAllShipsSunk = this.ships.every(ship => ship.hits.every(hit => hit === 'hit'));\r\n    }\r\n  }\r\n\r\n  private handleSunkShip(attackedShip: Ship) {\r\n    attackedShip.cellPositions.forEach(sunkPos => {\r\n      this.cells[sunkPos[0]][sunkPos[1]] = CellState.shipSunk;\r\n      let knownCellPositions = \r\n        [...this.getAdjacentCellPositions(sunkPos), ...this.getCornerCellPositions(sunkPos)]\r\n          .filter((pos): pos is [number, number] => pos !== undefined)\r\n          .filter(pos => {\r\n            let cellState = this.cells[pos[0]][pos[1]];\r\n            return cellState === CellState.empty;\r\n          });\r\n      this.setStateOfCells(knownCellPositions, CellState.knownEmpty);\r\n    });\r\n\r\n    this.sunkShipsInfo[attackedShip.size].sunk += 1;\r\n  }\r\n\r\n  public removeShipAt(position: [number, number]) {\r\n    const shipToRemove = this.findShipAt(position);\r\n    if (!shipToRemove) return;\r\n\r\n    this.setStateOfCells(shipToRemove.cellPositions, CellState.empty);\r\n    this.ships = this.ships.filter(ship => ship !== shipToRemove);\r\n    this.sunkShipsInfo[shipToRemove.size].quantity -= 1;\r\n  }\r\n\r\n  public rotateShipAt(position: [number, number]) {\r\n    const shipToRotate = this.findShipAt(position); \r\n\r\n    if (!shipToRotate) {\r\n      throw new Error(`Can't rotate. No ship found at (${position[0]}, ${position[1]}).`);\r\n    }\r\n\r\n    const cellsBeforeRotation = shipToRotate.cellPositions;\r\n    this.setStateOfCells(cellsBeforeRotation, CellState.empty);\r\n\r\n    const newDirection = shipToRotate.direction === 'horizontal' ? 'vertical' : 'horizontal';\r\n    const newShipPlacement: ShipPlacement = { \r\n      ship: shipToRotate, \r\n      direction: newDirection,\r\n      row: shipToRotate.originPosition[0],\r\n      column: shipToRotate.originPosition[1]\r\n    }\r\n    this.prepareToPlaceShip(newShipPlacement);\r\n\r\n    if (this.isNextShipPlacementValid) {\r\n      shipToRotate.direction = newDirection;\r\n      this.ships = this.ships.filter(ship => ship !== shipToRotate);\r\n      this.placeShip();\r\n    } else {\r\n      this.setStateOfCells(cellsBeforeRotation, CellState.shipIntact);\r\n    }\r\n  }\r\n\r\n  private findShipAt(position: [number, number]) {\r\n    return this.ships.find(ship => (\r\n      ship.cellPositions.some(cellPos => (cellPos[0] === position[0] && cellPos[1] === position[1]))\r\n    ));\r\n  }\r\n\r\n  private wouldShipsBeInContact(proposedPlacement: ShipPlacement) {\r\n    const proposedCells = this.predictCellsInShip(proposedPlacement);\r\n    for (const cell of proposedCells) {\r\n      const surroundingCellStates = this.getSurroundingCellStates(cell).filter(state => state !== undefined);\r\n      const isContact = !surroundingCellStates.every(state => state === CellState.empty);\r\n      if (isContact) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getSurroundingCellStates(position: [number, number]) {\r\n    const row = position[0];\r\n    const column = position[1];\r\n    const surroundingStates: (CellState | undefined)[] = [];\r\n\r\n    for (let checkedRow = row - 1; checkedRow <= row + 1; checkedRow++) {\r\n      for (let checkedColumn = column - 1; checkedColumn <= column + 1; checkedColumn++) {\r\n        const isValidRow = checkedRow >= 0 && checkedRow <= 9;\r\n        const isValidColumn = checkedColumn >= 0 && checkedColumn <= 9;\r\n        const cellsInRow = isValidRow ? this.cells[checkedRow] : undefined;\r\n        const targetCell = cellsInRow ? (isValidColumn ? cellsInRow[checkedColumn] : undefined) : undefined;\r\n        surroundingStates.push(targetCell);\r\n      }\r\n    }\r\n\r\n    return surroundingStates;\r\n  }\r\n\r\n  public getCornerCellStates(position: [number, number]) {\r\n    const surrounding = this.getSurroundingCellStates(position);\r\n    return [surrounding[0], surrounding[2], surrounding[6], surrounding[8]];\r\n  }\r\n\r\n  public getAdjacentCellStates(position: [number, number]) {\r\n    const surrounding = this.getSurroundingCellStates(position);\r\n    return [surrounding[1], surrounding[3], surrounding[5], surrounding[7]];\r\n  }\r\n\r\n  private getCornerCellPositions(position: [number, number]): ([number, number] | undefined)[] {\r\n    const existsRowBefore = position[0] - 1 >= 0;\r\n    const existsRowAfter = position[0] + 1 <= 9;\r\n    const existsColumnBefore = position[1] - 1 >= 0;\r\n    const existsColumnAfter = position[1] + 1 <= 9;\r\n    return [\r\n      existsRowBefore && existsColumnBefore ? [position[0] - 1, position[1] - 1] : undefined,\r\n      existsRowBefore && existsColumnAfter ? [position[0] - 1, position[1] + 1] : undefined,\r\n      existsRowAfter && existsColumnBefore ? [position[0] + 1, position[1] - 1] : undefined,\r\n      existsRowAfter && existsColumnAfter ? [position[0] + 1, position[1] + 1] : undefined\r\n    ];\r\n  }\r\n\r\n  public getAdjacentCellPositions(position: [number, number]): ([number, number] | undefined)[] {\r\n    return [\r\n      position[0] - 1 >= 0 ? [position[0] - 1, position[1]] : undefined,\r\n      position[1] - 1 >= 0 ? [position[0], position[1] - 1] : undefined,\r\n      position[1] + 1 <= 9 ? [position[0], position[1] + 1] : undefined,\r\n      position[0] + 1 <= 9 ? [position[0] + 1, position[1]] : undefined,\r\n    ];\r\n  }\r\n\r\n  private predictCellsInShip(shipPlacement: ShipPlacement) {\r\n    if (!shipPlacement) throw new Error(\"No ship placement provided.\");\r\n    const { ship, direction, row, column } = shipPlacement;\r\n\r\n    let positions: [number, number][] = []\r\n\r\n    for (let i = 0; i < ship.size; i++) {\r\n      if (direction === 'horizontal') {\r\n        positions.push([row, column + i]);\r\n      } else if (direction === 'vertical') {\r\n        positions.push([row + i, column]);\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  private setStateOfCells(positions: [number, number][], newState: CellState) {\r\n    positions.forEach(pos => this.cells[pos[0]][pos[1]] = newState);\r\n  }\r\n\r\n  public get arePositionsLocked() { return this._arePositionsLocked; }\r\n\r\n  public numberOfShipsWithSize(size: number) { \r\n    return this.ships.filter(ship => ship.size === size).length;\r\n  }\r\n}\r\n\r\nexport { CellState, GameBoard };","type HitState = 'intact' | 'hit';\r\n\r\nclass Ship {\r\n  public size;\r\n  public hits: HitState[];\r\n  public isSunk = false;\r\n  public direction: 'horizontal' | 'vertical' = 'horizontal';\r\n  private _cellPositions: [number, number][] = [];\r\n  private _originPosition: [number, number] = [-1, -1];\r\n\r\n  constructor(initSize: number) {\r\n    this.size = initSize;\r\n    this.hits = this.initializeHits();\r\n  }\r\n\r\n  public get cellPositions() { return this._cellPositions; }\r\n  public set cellPositions(newPositions: [number, number][]) {\r\n    this._cellPositions = newPositions;\r\n    this._originPosition = newPositions.reduce((origin, position) => {\r\n      return [Math.min(origin[0], position[0]), Math.min(origin[1], position[1])];\r\n    }, [10, 10]);\r\n  }\r\n\r\n  public get originPosition() { return this._originPosition; }\r\n\r\n  private initializeHits() {\r\n    return Array.from({ length: this.size }).map(x => 'intact' as HitState);\r\n  }\r\n\r\n  public hit(index: number) {\r\n    this.hits[index] = 'hit';\r\n    this.isSunk = this.hits.every(state => state === 'hit');\r\n  }\r\n}\r\n\r\nexport default Ship;","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { CellState, ShipPlacement } from '../logic/gameBoard';\r\nimport Player from '../logic/player';\r\nimport Ship from '../logic/ship';\r\nimport '../styles/BoardCell.css';\r\nimport { ShipDragEvent } from './DraggableShip';\r\n\r\ninterface Props {\r\n  cell: CellState;\r\n  owner: Player;\r\n  index: number;\r\n}\r\n\r\nconst BoardCell: React.FC<Props> = ({ cell, owner, index }) => {\r\n  const cellRef: any = useRef(null);\r\n  const board = owner.board;\r\n\r\n  useEffect(() => {\r\n    const cellRefInit = cellRef.current;\r\n    cellRefInit.addEventListener('shipDrag', handleShipDrag);\r\n    return () => cellRefInit.removeEventListener('shipDrag', handleShipDrag);\r\n  }, []);\r\n\r\n  function getCellPositionFromIndex() {\r\n    const row = Math.floor(index / 10);\r\n    const column = index % 10;\r\n    return [row, column];\r\n  }\r\n\r\n  function handleShipDrag(event: ShipDragEvent) {\r\n    const [row, column] = getCellPositionFromIndex();\r\n    const { size, direction, dragStop, setIsDropPositionValid } = event.detail;\r\n    const ship = new Ship(size);\r\n    const placement: ShipPlacement = { ship, direction, row, column };\r\n    board.prepareToPlaceShip(placement);\r\n    if (board.isNextShipPlacementValid) {\r\n      setIsDropPositionValid(true);\r\n      if (dragStop) {\r\n        board.placeShip();\r\n      }\r\n    } else {\r\n      setIsDropPositionValid(false);\r\n    }\r\n  }\r\n\r\n  function handleClickCell() {\r\n    const [row, column] = getCellPositionFromIndex();\r\n\r\n    if (board.arePositionsLocked) {\r\n      owner.opponent?.attack([row, column]);\r\n    } else {\r\n      if (board.cells[row][column] === CellState.shipIntact) {\r\n        board.removeShipAt([row, column]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setCellStyle(cellState: CellState) {\r\n    let style = '';\r\n    const stateStyles = ['', 'cell-missed', '', 'cell-hit', 'cell-sunk', 'cell-known-empty'];\r\n    style = stateStyles[cellState];\r\n  \r\n    if (owner.type === 'human') {\r\n      if (cellState === CellState.shipIntact) {\r\n        style += ' cell-user';\r\n        if (!board.arePositionsLocked) {\r\n          style += ' cell-removeable';\r\n        }\r\n      }\r\n      if (board.arePositionsLocked) {\r\n        style += ' cell-uninteractable';\r\n      }\r\n    }\r\n    else {\r\n      if (cellState !== CellState.empty && cellState !== CellState.shipIntact) {\r\n        style += ' cell-uninteractable';\r\n      } else if (cellState === CellState.shipIntact) {\r\n        if (board.haveAllShipsSunk || owner.opponent?.board.haveAllShipsSunk) {\r\n          style += ' cell-user';\r\n        }\r\n      }\r\n    }\r\n\r\n    if (index === 0) style += ' cell-top-left';\r\n    else if (index === 9) style += ' cell-top-right';\r\n    else if (index === 90) style += ' cell-bottom-left';\r\n    else if (index === 99) style += ' cell-bottom-right';\r\n\r\n    if (owner.type === 'cpu') style += ' cell-hoverable';\r\n    \r\n    return style;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={cellRef}\r\n      className={`board-cell ${setCellStyle(cell)}`}\r\n      onClick={handleClickCell}\r\n    />\r\n  )\r\n}\r\n\r\nexport default observer(BoardCell);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { GameBoard } from '../logic/gameBoard';\r\nimport '../styles/SunkShipIndicators.css';\r\n\r\nconst SunkShipIndicators: React.FC<{ board: GameBoard }> = ({ board }) => {\r\n  let sunkShipsInfo: { shipSize: number, quantity: number, sunk: number }[] = [];\r\n\r\n  for (const key in board.sunkShipsInfo) {\r\n    sunkShipsInfo.push({\r\n      shipSize: parseInt(key),\r\n      quantity: board.sunkShipsInfo[key].quantity,\r\n      sunk: board.sunkShipsInfo[key].sunk\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"sunk-indicators-container\">\r\n      <div className=\"sunk-ships-indicator-label\">Sunk ships</div>\r\n      {sunkShipsInfo.map(info => (\r\n        <div key={info.shipSize}>\r\n          {Array.from({ length: info.quantity }).map((_, index) => (\r\n            <span key={index} className=\"sunk-indicator\">\r\n              {Array.from({ length: info.shipSize }).map((_, key) =>\r\n                <span\r\n                  key={key}\r\n                  className={`indicator-cell ${index < info.sunk ? \"indicator-sunk\" : \"indicator-not-sunk\"}`}\r\n                />\r\n              )}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(SunkShipIndicators);","import React from 'react';\r\nimport '../styles/GameBoardDisplay.css';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Player from '../logic/player';\r\nimport BoardCell from './BoardCell';\r\nimport SunkShipIndicators from './SunkShipIndicators';\r\n\r\nconst GameBoardDisplay: React.FC<{ owner: Player }> = ({ owner }) => {\r\n  const isGameOver = owner.board.haveAllShipsSunk || owner.opponent?.board.haveAllShipsSunk;\r\n  return (\r\n    <div className=\"board-display-container\">\r\n      <div className=\"board-owner-label\">\r\n        {owner.type === 'human' ? 'Your board' : `Opponent's board`}\r\n      </div>\r\n      <div className={`board-grid ${setStyle()}`}>\r\n        {owner.board.cells.flat().map((cell, index) => (\r\n          <BoardCell key={index} cell={cell} owner={owner} index={index}/>\r\n        ))}\r\n      </div>\r\n      {(owner.type === 'cpu' && !isGameOver) && <SunkShipIndicators board={owner.board}/> }\r\n    </div>\r\n  )\r\n\r\n  function setStyle() {\r\n    let style = '';\r\n    if (isGameOver) {\r\n      style += 'disabled-board';\r\n    } else if (owner.isPlayerTurn && owner.board.arePositionsLocked) {\r\n      style += 'dimmed-board disabled-board';\r\n    }\r\n    \r\n    return style;\r\n  }\r\n}\r\n\r\nexport default observer(GameBoardDisplay);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Player from '../logic/player';\r\nimport '../styles/GameEndMessage.css';\r\n\r\nconst GameEndMessage: React.FC<{ players: Player[] }> = ({ players }) => {\r\n  const loser = players.find(player => player.board.haveAllShipsSunk);\r\n  if (!loser) return null;\r\n  return (\r\n    <div id=\"end-message-container\">\r\n      {loser.type === 'human' ? \r\n      <>\r\n        <h3>Game over!</h3>\r\n        <p>You fought valiantly, but your digital opponent ultimately prevailed.</p>\r\n      </>\r\n      :\r\n      <>\r\n        <h3>Victory!</h3>\r\n        <p>Congratulations, human.<br/>You are a fine strategist.</p>\r\n      </>}\r\n      <button onClick={() => window.location.reload()} id=\"play-again-button\">Play again</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameEndMessage);","import React from 'react';\r\nimport '../styles/GithubFooter.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst GithubFooter = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <div>by mangonaise</div>\r\n      <FontAwesomeIcon icon={faHeart} color=\"rgb(230, 101, 144)\"/>\r\n      <a href=\"https://github.com/mangonaise/battleship\">github</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GithubFooter;","import React, { MutableRefObject, useRef, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport '../styles/DraggableShip.css';\r\nimport Draggable from 'react-draggable';\r\n\r\ninterface Props {\r\n  size: number, \r\n  display: boolean, \r\n  direction: 'horizontal' | 'vertical'\r\n}\r\n\r\nexport type ShipDragEvent = CustomEvent<{\r\n  size: number,\r\n  direction: 'horizontal' | 'vertical',\r\n  dragStop: boolean,\r\n  setIsDropPositionValid: React.Dispatch<React.SetStateAction<boolean>>\r\n}>\r\n\r\nconst DraggableShip: React.FC<Props> = ({ size, display, direction }) => {\r\n  // needed for react strict mode\r\n  const nodeRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [isDropPositionValid, setIsDropPositionValid] = useState(false);\r\n\r\n  function handleDragStart() {\r\n    setZIndex(1);\r\n    setIsDragging(true);\r\n    setIsDropPositionValid(false);\r\n  }\r\n\r\n  function handleDragMove(e: MouseEvent) {\r\n    const cell = findCellAtPoint(e.x, e.y);\r\n    if (cell) {\r\n      cell.dispatchEvent(createDragEvent(false));\r\n    } else {\r\n      setIsDropPositionValid(false);\r\n    }\r\n  }\r\n\r\n  function handleDragStop(e: MouseEvent) {\r\n    const cell = findCellAtPoint(e.x, e.y);\r\n    if (cell) {\r\n      cell.dispatchEvent(createDragEvent(true));\r\n    }\r\n    setZIndex(0);\r\n    setIsDragging(false);\r\n  }\r\n\r\n  function findCellAtPoint(x: number, y: number) {\r\n    return document.elementsFromPoint(x, y).find(el => el.classList.contains('board-cell'));\r\n  }\r\n\r\n  function createDragEvent(dragStop: boolean): ShipDragEvent {\r\n    return new CustomEvent('shipDrag', { 'detail': {\r\n      size,\r\n      direction,\r\n      dragStop,\r\n      setIsDropPositionValid\r\n    }});\r\n  }\r\n\r\n  function setZIndex(value: number) {\r\n    if (nodeRef.current) {\r\n      nodeRef.current.style.zIndex = value.toString();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Draggable\r\n        nodeRef={nodeRef}\r\n        defaultPosition={{ x: 0, y: 0 }}\r\n        position={{ x: 0, y: 0 }}\r\n        scale={1}\r\n        onStart={handleDragStart}\r\n        onDrag={e => handleDragMove(e as MouseEvent)}\r\n        onStop={e => handleDragStop(e as MouseEvent)}>\r\n        <div\r\n          ref={nodeRef}\r\n          className=\"draggable-ship\"\r\n          style={{\r\n            position: isDragging ? 'absolute' : 'relative',\r\n            display: display ? 'inline-flex' : 'none',\r\n            flexDirection: isDragging && direction === 'vertical' ? 'column' : 'row'\r\n          }}>\r\n          {Array.from({ length: size }).map((_, index) => (\r\n            <span\r\n              key={index}\r\n              className={\r\n                `ship-placer-cell \r\n                ${index === 0 ? 'draggable-cell' : ''} \r\n                ${isDragging ? (isDropPositionValid ? 'dragging-valid' : 'dragging-invalid') : ''}`\r\n              }\r\n              style={calculateBorderStyles(size, index)}\r\n              >\r\n              {index === 0 && <FontAwesomeIcon icon={faArrowsAlt} />}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </Draggable>\r\n    </div>\r\n  )\r\n\r\n  function calculateBorderStyles(shipSize: number, cellIndex: number) {\r\n    let borderRight = '';\r\n    let borderBottom = '';\r\n    if (isDragging && direction === 'vertical') {\r\n      borderBottom = cellIndex < shipSize - 1 ? 'none': '';\r\n    }\r\n    else {\r\n      borderRight = cellIndex < shipSize - 1 ? 'none' : '';\r\n    }\r\n\r\n    return { borderRight, borderBottom };\r\n  }\r\n}\r\n\r\nexport default DraggableShip;","import React from 'react';\r\nimport '../styles/GameRules.css';\r\n\r\nconst GameRules: React.FC = () => {\r\n  return (\r\n    <div id=\"game-rules-container\">\r\n      <div id=\"game-rules-text\">\r\n        Attack your opponent's board.<br/>\r\n        Sink all the ships!<br/>\r\n      </div>\r\n      <div id=\"cell-preview-container\">\r\n        <div>\r\n          <span className=\"rules-cell-preview board-cell cell-missed\" />\r\n          <div className=\"cell-preview-label\">empty</div>\r\n        </div>\r\n        <div>\r\n          <span className=\"rules-cell-preview board-cell cell-hit\" />\r\n          <div className=\"cell-preview-label\">hit</div>\r\n        </div>\r\n        <div>\r\n          <span className=\"rules-cell-preview board-cell cell-sunk\" />\r\n          <div className=\"cell-preview-label\">sunk</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameRules;","import { faArrowsAlt, faArrowsAltH, faArrowsAltV, faDice, faPlay, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport Player from '../logic/player';\r\nimport '../styles/ShipPlacementMenu.css';\r\nimport DraggableShip from './DraggableShip';\r\nimport GameRules from './GameRules';\r\n\r\nconst ShipPlacementMenu: React.FC<{ user: Player }> = ({ user }) => {\r\n  const [direction, setDirection] = useState<'horizontal' | 'vertical'>('horizontal');\r\n\r\n  return (\r\n    <div id=\"ship-placer-container\">\r\n      <h3>Place your ships to get started.</h3>\r\n      <button onClick={() => user.board.clear()} className=\"placement-option-button\">\r\n        <FontAwesomeIcon className=\"placement-option-icon\" icon={faSyncAlt} /> Clear board\r\n      </button>\r\n      <button onClick={() => user.placeRandomShips(true)} className=\"placement-option-button\">\r\n        <FontAwesomeIcon className=\"placement-option-icon\" icon={faDice} /> Place randomly\r\n      </button>\r\n\r\n      {user.board.ships.length < 10 ?\r\n        <div>\r\n          <div id=\"manual-placement-text\">\r\n            Drag & drop using the\r\n            <FontAwesomeIcon style={{color: 'gray', padding: '0 4px'}} icon={faArrowsAlt} />\r\n            handles.\r\n          </div>\r\n          <div className=\"direction-toggle-container\">\r\n            <button\r\n              onClick={() => setDirection('horizontal')}\r\n              className={`placement-direction-button ${direction === 'horizontal' ? 'active-direction-button' : ''}`}>\r\n              <FontAwesomeIcon icon={faArrowsAltH} />\r\n            </button>\r\n            <button\r\n              className={`placement-direction-button ${direction === 'vertical' ? 'active-direction-button' : ''}`}\r\n              onClick={() => setDirection('vertical')}>\r\n              <FontAwesomeIcon icon={faArrowsAltV} />\r\n            </button>\r\n            <p>placing {direction}ly</p>\r\n          </div>\r\n        </div>\r\n        :\r\n        <>\r\n          <h3 style={{ marginTop: '10px' }}>Good to go!</h3>\r\n          <button onClick={() => user.board.lockShipsInPlace()} id=\"start-button\" className=\"placement-option-button\">\r\n            <FontAwesomeIcon className=\"placement-option-icon\" icon={faPlay} /> Start game\r\n          </button>\r\n          <GameRules />\r\n        </>\r\n      }\r\n\r\n      {Array.from({ length: 4 }).map((_, groupIndex) => (\r\n        <div key={groupIndex} className=\"draggable-ship-group\">\r\n          {Array.from({ length: groupIndex + 1 }).map((_, shipIndex) => (\r\n            <DraggableShip\r\n              key={shipIndex}\r\n              size={4 - groupIndex}\r\n              display={user.board.numberOfShipsWithSize(4 - groupIndex) <= shipIndex}\r\n              direction={direction} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(ShipPlacementMenu);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Player from '../logic/player';\r\n\r\nconst StatusText: React.FC<{ user: Player }> = ({ user }) => {\r\n  return (\r\n    <h1 id=\"game-status\">{getStatus()}</h1>\r\n  )\r\n\r\n  function getStatus() {\r\n    let status = '';\r\n    if (!user.board.arePositionsLocked) {\r\n      status = 'Battleship';\r\n    } else {\r\n      if (user.board.haveAllShipsSunk) {\r\n        status = 'You lose!';\r\n      } else if (user.opponent?.board.haveAllShipsSunk) {\r\n        status = 'You win!';\r\n      } else {\r\n        if (user.isPlayerTurn) {\r\n          status = user.hasExtraTurn ? 'Hit! Extra move' : 'Your move';\r\n        } else if (user.opponent?.isPlayerTurn) {\r\n          status = 'Computer\\'s move';\r\n        }\r\n      }\r\n    }\r\n    \r\n    return status\r\n  }\r\n}\r\n\r\nexport default observer(StatusText);","import { CellState, GameBoard } from \"./gameBoard\";\r\nimport Ship from \"./ship\";\r\nimport repeat from 'lodash/times';\r\nimport shuffle from 'lodash/shuffle';\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nclass Player {\r\n  public board: GameBoard;\r\n  public type: 'human' | 'cpu';\r\n  public opponent: Player | null = null;\r\n  public isPlayerTurn = false;\r\n  public hasExtraTurn = false;\r\n  public autoAttackDelay = 0;\r\n\r\n  constructor(type: 'human' | 'cpu' = 'human') {\r\n    makeAutoObservable(this);\r\n    this.board = new GameBoard();\r\n    this.type = type;\r\n    if (this.type === 'cpu') {\r\n      this.placeRandomShips();\r\n      this.board.lockShipsInPlace();\r\n    } else if (this.type === 'human') {\r\n      this.isPlayerTurn = true;\r\n    }\r\n  }\r\n\r\n  public placeRandomShips(clearFirst: boolean = false) {\r\n    if (clearFirst) this.board.clear();\r\n    for (let shipsToPlace = 1; shipsToPlace <= 4; shipsToPlace++) {\r\n      repeat(shipsToPlace, () => {\r\n        const shipSize = 5 - shipsToPlace;\r\n        while(!this.board.isNextShipPlacementValid) {\r\n          const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical';\r\n          const unconstrainedPosition = Math.floor(Math.random() * 10);\r\n          const constrainedPosition = Math.floor(Math.random() * (10 - shipSize));\r\n          const origin = direction === 'horizontal' ?\r\n            [unconstrainedPosition, constrainedPosition]\r\n            : [constrainedPosition, unconstrainedPosition];\r\n          this.board.prepareToPlaceShip({ ship: new Ship(shipSize), direction, row: origin[0], column: origin[1]})\r\n        }\r\n        this.board.placeShip();\r\n      })\r\n    }\r\n  }\r\n\r\n  public attack(position: [number, number]) {\r\n    if (!this.opponent) throw new Error(\"Can't attack as there is no opponent.\");\r\n    if (this.board.haveAllShipsSunk || this.opponent.board.haveAllShipsSunk) return;\r\n    this.opponent.board.receiveAttack(position);\r\n\r\n    if (this.opponent.board.cells[position[0]][position[1]] === CellState.missed) {\r\n      this.isPlayerTurn = false;\r\n      this.opponent.isPlayerTurn = true;\r\n      if (this.opponent.type === 'cpu' && this.opponent.autoAttackDelay > 0) {\r\n        this.opponent.autoAttack();\r\n      }\r\n      this.hasExtraTurn = false;\r\n    }\r\n    else {\r\n      this.hasExtraTurn = true;\r\n      if (this.type === 'cpu' && this.autoAttackDelay > 0) {\r\n        this.autoAttack();\r\n      }\r\n    }\r\n  }\r\n\r\n  private autoAttack() {\r\n    if (!this.opponent) throw new Error(\"Can't auto attack. Opponent not found.\");\r\n    setTimeout(() => this.makeSmartMove(), this.autoAttackDelay * 1000);\r\n  }\r\n\r\n  public makeSmartMove() {\r\n    if (!this.opponent) return;\r\n    const opponentBoard = this.opponent.board;\r\n    const hitPositions = opponentBoard.findCellsWithState([CellState.shipHit]);\r\n\r\n    if (hitPositions.length === 0) {\r\n      this.attackRandomCell();\r\n      return;\r\n    }\r\n\r\n    if (hitPositions.length === 1) {\r\n      let adjacentPositions = shuffle(\r\n        opponentBoard.getAdjacentCellPositions(hitPositions[0])\r\n        .filter((pos): pos is [number, number] => pos !== undefined)\r\n        .filter(pos => ![CellState.missed, CellState.knownEmpty].includes(opponentBoard.cells[pos[0]][pos[1]]))\r\n        .filter(pos => {\r\n          const cornerStates = opponentBoard.getCornerCellStates(pos);\r\n          return !cornerStates.some(state => state === CellState.shipHit || state === CellState.shipSunk);\r\n        })\r\n      );\r\n      this.attack(adjacentPositions[0]);\r\n      return;\r\n    }\r\n\r\n    let endPositions = shuffle(\r\n      hitPositions.filter(hitPos => {\r\n        const adjacentStates = opponentBoard.getAdjacentCellStates(hitPos);\r\n        return adjacentStates.filter(state => state === CellState.shipHit).length === 1;\r\n      })\r\n    );\r\n\r\n    let extendedPositions: [number, number][] = \r\n      endPositions\r\n        .map(pos => { \r\n          // Finds the position opposite the hit cell.\r\n          const adjacentStates = opponentBoard.getAdjacentCellStates(pos);\r\n          const adjacentIndex = adjacentStates.indexOf(CellState.shipHit);\r\n          if (adjacentIndex === 0) return pos[0] + 1 <= 9 ? [pos[0] + 1, pos[1]] as [number, number] : undefined;\r\n          if (adjacentIndex === 1) return pos[1] + 1 <= 9 ? [pos[0], pos[1] + 1] as [number, number] : undefined;\r\n          if (adjacentIndex === 2) return pos[1] - 1 >= 0 ? [pos[0], pos[1] - 1] as [number, number] : undefined;\r\n          if (adjacentIndex === 3) return pos[0] - 1 >= 0 ? [pos[0] - 1, pos[1]] as [number, number] : undefined;\r\n          return undefined;\r\n        })\r\n        .filter((pos): pos is [number, number] => pos !== undefined)\r\n        .filter(pos => {\r\n          const cellState = opponentBoard.cells[pos[0]][pos[1]];\r\n          return cellState === CellState.empty || cellState === CellState.shipIntact;\r\n        });\r\n\r\n    for (const unhitPos of extendedPositions) {\r\n      const surroundingStates = opponentBoard.getSurroundingCellStates(unhitPos);\r\n      const surroundingHitCells = surroundingStates.filter(state => state === CellState.shipHit || state === CellState.shipSunk);\r\n\r\n      if (surroundingHitCells.length === 1) {\r\n        this.attack(unhitPos);\r\n        return;\r\n      }\r\n    }\r\n\r\n    throw new Error(\"Logic error! Checked either end of hit cells and found no available space to attack.\");\r\n  }\r\n\r\n  private attackRandomCell() {\r\n    const opponentBoard = this.opponent!.board;\r\n    let freeCellPositions = opponentBoard.findCellsWithState([CellState.empty, CellState.shipIntact]);\r\n\r\n    if (freeCellPositions.length === 0) {\r\n      throw new Error('No more positions for CPU to check. The game should have ended by now.');\r\n    }\r\n    \r\n    const randomCellIndex = Math.floor(Math.random() * freeCellPositions.length);\r\n    this.attack(freeCellPositions[randomCellIndex]);\r\n  }\r\n}\r\n\r\nexport default Player;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport GameBoardDisplay from './components/GameBoardDisplay';\r\nimport GameEndMessage from './components/GameEndMessage';\r\nimport GithubFooter from './components/GithubFooter';\r\nimport ShipPlacementMenu from './components/ShipPlacementMenu';\r\nimport StatusText from './components/StatusText';\r\nimport Player from './logic/player';\r\nimport './styles/App.css';\r\n\r\nconst human = new Player('human');\r\nconst cpu = new Player('cpu');\r\ncpu.autoAttackDelay = 1.4;\r\nhuman.opponent = cpu;\r\ncpu.opponent = human;\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <StatusText user={human} />\r\n      <div id=\"app-container\">\r\n        <div id=\"game-container\">\r\n          <GameBoardDisplay owner={human} />\r\n          {!human.board.arePositionsLocked && <ShipPlacementMenu user={human} />}\r\n          {human.board.arePositionsLocked && <GameBoardDisplay owner={cpu} />}\r\n          <GameEndMessage players={[human, cpu]} />\r\n        </div>\r\n      </div>\r\n      <GithubFooter />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}